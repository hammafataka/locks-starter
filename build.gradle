plugins {
    id 'java'
    id 'idea'
    id 'groovy'
    id 'signing'
    id 'jacoco'
    id 'java-library'
    id 'maven-publish'
    id 'io.freefair.lombok' version '8.14.2'
    id 'org.sonarqube' version '4.0.0.2929'
    id 'org.springframework.boot' version '3.5.4'
    id "com.netflix.nebula.release" version "21.0.0"
    id "io.spring.dependency-management" version "1.1.0"
    id 'io.github.gradle-nexus.publish-plugin' version '2.0.0'
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'jacoco'
    apply plugin: 'java-library'
    apply plugin: 'org.sonarqube'
    apply plugin: 'io.freefair.lombok'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'com.netflix.nebula.release'
    apply plugin: 'io.spring.dependency-management'

    group 'dev.mfataka'


    repositories {
        mavenCentral()
    }
    dependencies {
        implementation "org.jetbrains:annotations:$JETBRAINS_ANNOTATION_VERSION"

        testImplementation "io.projectreactor:reactor-test:$REACTOR_TEST"
        testImplementation "org.junit.jupiter:junit-jupiter"
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    }

    test {
        useJUnitPlatform()
    }

    java {
        withJavadocJar()
        toolchain {
            languageVersion = JavaLanguageVersion.of(17)
        }
    }

    jar {
        enabled = true
    }
    bootJar {
        enabled = false
    }


    tasks.register('sourcesJar', Jar) {
        dependsOn classes
        archiveClassifier.set('sources')
        from sourceSets.main.allSource
    }
    artifacts {
        archives sourcesJar
    }

    test {
        jacoco {
            destinationFile = layout.buildDirectory.file("jacoco/jacocoTest.exec").get().asFile
            classDumpDir = layout.buildDirectory.file("jacoco/classpathdumps").get().asFile
        }
        finalizedBy jacocoTestReport
    }
    jacocoTestReport {
        reports {
            xml.required = true
            csv.required = false
            html.required = false
        }
    }

    jacoco {
        toolVersion = "0.8.8"
    }
}


nexusPublishing {
    repositories {
        sonatype {
            nexusUrl.set(uri("https://ossrh-staging-api.central.sonatype.com/service/local/"))
            snapshotRepositoryUrl.set(uri("https://central.sonatype.com/repository/maven-snapshots/"))
            username = System.getenv('OSSRH_USERNAME')
            password = System.getenv('OSSRH_PASSWORD')
        }
    }
}
sonar {
    properties {
        property "sonar.projectKey", "locks-starter"
        property "sonar.coveragePlugin", "jacoco"
        property "sonar.qualitygate.wait", true
        property "sonar.host.url", System.getenv().getOrDefault("SONAR_HOST_URL", "")
        property "sonar.jacoco.xmlReportPaths", layout.buildDirectory.dir("/reports/jacoco/test/").get()
        property "sonar.dependencyCheck.htmlReportPath", layout.buildDirectory.dir("/reports/dependencyCheck/dependency-check-report.html").get()
    }
}
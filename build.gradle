plugins {
    id 'java'
    id 'idea'
    id 'groovy'
    id 'signing'
    id 'jacoco'
    id 'application'
    id 'java-library'
    id 'maven-publish'
    id 'io.freefair.lombok' version '6.6.1'
    id 'org.sonarqube' version '4.0.0.2929'
    id 'org.springframework.boot' version '3.5.4'
    id "com.google.cloud.tools.jib" version "3.4.5"
    id "com.netflix.nebula.release" version "21.0.0"
    id "io.spring.dependency-management" version "1.1.0"
    id 'io.github.gradle-nexus.publish-plugin' version '2.0.0'
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'jacoco'
    apply plugin: 'java-library'
    apply plugin: 'org.sonarqube'
    apply plugin: "nebula.release"
    apply plugin: 'nebula.release'
    apply plugin: 'io.freefair.lombok'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    group 'dev.mfataka'


    repositories {
        mavenCentral()
    }
    dependencies {
        implementation "org.jetbrains:annotations:$JETBRAINS_ANNOTATION_VERSION"

        testImplementation "io.projectreactor:reactor-test:$REACTOR_TEST"
        testImplementation "org.junit.jupiter:junit-jupiter"
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    }

    test {
        useJUnitPlatform()
    }

    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(17)
        }
    }

    jar {
        enabled = true
    }
    bootJar {
        enabled = false
    }


    tasks.register('sourcesJar', Jar) {
        dependsOn classes
        archiveClassifier.set('sources')
        from sourceSets.main.allSource
    }
    artifacts {
        archives sourcesJar
    }

    test {
        jacoco {
            destinationFile = layout.buildDirectory.file("jacoco/jacocoTest.exec").get().asFile
            classDumpDir = layout.buildDirectory.file("jacoco/classpathdumps").get().asFile
        }
        finalizedBy jacocoTestReport
    }
    jacocoTestReport {
        reports {
            xml.required = true
            csv.required = false
            html.required = false
        }
    }

    jacoco {
        toolVersion = "0.8.8"
    }
}

subprojects {
    publishing {
        publications {
            "$project.name"(MavenPublication) {
                artifact(tasks.sourcesJar)
                version = project.version

                from components.java
                afterEvaluate {
                    artifactId = project.name
                }
                versionMapping {
                    usage('java-api') {
                        fromResolutionOf('runtimeClasspath')
                    }
                    usage('java-runtime') {
                        fromResolutionResult()
                    }
                }
                pom {
                    name = project.name
                    description = ' locks library for local and distributed locks '
                    inceptionYear.set("2025")
                    organization {
                        name.set("MFataka")
                        url.set("https://mfataka.dev/")
                    }
                    licenses {
                        license {
                            name = 'The Apache License, Version 2.0'
                            url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }
                    developers {
                        developer {
                            id = 'mfataka'
                            name = 'Mohammed Fataka'
                            email = 'hammafataka@yahoo.fom'
                        }
                    }
                    contributors {
                        name = 'Mohammed Fataka'
                    }
                }

            }
        }
    }


}

signing {
    def key = findProperty('signingKey') ?: System.getenv('SIGNING_KEY')
    def pass = findProperty('signingPassword') ?: System.getenv('SIGNING_PASSWORD')
    useInMemoryPgpKeys(key, pass)
    sign publishing.publications.withType(MavenPublication)
}

publishing {
    repositories {
        maven { ->

            def repoEnv = System.getenv('GITHUB_REPOSITORY') // e.g. "hammafataka/locks-starter"
            def (owner, repo) = (repoEnv ?: 'hammafataka/esn-web-backend').toLowerCase().split('/')
            name = "GitHubPackages"

            url = uri("https://maven.pkg.github.com/${owner}/${repo}")

            credentials {
                username = System.getenv("GITHUB_ACTOR")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
        maven {

            def containsSnapshot = project.version.toString().contains("snapshot")
            name = containsSnapshot ? "OSSRH_Snapshots" : "OSSRH"

            url = uri(containsSnapshot ? "https://s01.oss.sonatype.org/content/repositories/snapshots/" : "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/")
            credentials {
                username = System.getenv("OSSRH_USERNAME")
                password = System.getenv("OSSRH_PASSWORD")
            }
        }
    }
}


nexusPublishing {
    repositories {
        sonatype {
            username = findProperty('ossrhUsername').toString() ?: System.getenv('OSSRH_USERNAME')
            password = findProperty('ossrhPassword').toString() ?: System.getenv('OSSRH_PASSWORD')
        }
    }
}

sonar {
    properties {
        property "sonar.projectKey", "locks-starter"
        property "sonar.coveragePlugin", "jacoco"
        property "sonar.qualitygate.wait", true
        property "sonar.host.url", System.getenv().getOrDefault("SONAR_HOST_URL", "")
        property "sonar.jacoco.xmlReportPaths", layout.buildDirectory.dir("/reports/jacoco/test/").get()
        property "sonar.dependencyCheck.htmlReportPath", layout.buildDirectory.dir("/reports/dependencyCheck/dependency-check-report.html").get()
    }
}